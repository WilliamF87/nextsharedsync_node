npm init: para instalar package.json
npm i express
npm i --save--dev nodemon: reinicia el servidor cada vez que detecte cambios en el código


agregar scripts en package.json:
    "dev": "nodemon ./index.js": para desarrollo
    "start": "node ./index.js": para el deploy

agregar type module en package.json para trabajar con imports:
    "type": "module",

Sin imports los componentes se llaman así:
    const express = require('express');
    const conectarDB = require('./config/db')
    equire('dotenv').config({ path: 'variables.env' }); sin imports

Instalar OMR (mongoose)
npm i mongoose dotenv

Crear carpeta routes

Hashear el password
npm i bcryptjs

Validaciones
npm i express-validator

Generar el jsonwebtoken
npm i jsonwebtoken

npm i shortid
Libreria para generar las url de descarga

uuid es otra opción, pero genera urls bastante largas

npm i multer
Para subir archivos

Instalar y configurar cors: npm i cors

Habilitar carpeta publica en idex con express.static



Deploy del backend

Carpeta upload: una carpeta vacia no se sube en git.
Tener al menos un archivo cuando se vaya a realizar el commit

crear repositorio en git
correr comando "git init" en cdm (carpeta backend)

Seguir los pasos que marca git:

git add .
git commit -m "Se sube el proyecto a gitHub"
git branch -M main
git remote add origin https://github.com/WilliamF87/nextsharedsync_node.git
git push -u origin main

Deploy con Heroku (backend)

Iniciar sesión de heroku desde carpeta backend:
    heroku login
Este comando abre la página de logeo (si pide crear metodo de autenticación, dal clic en cancelar)
luego usar comandos:
    heroku create
    git push heroku master
    Si la linea anterior marca error, usar:
    git push heroku main

Por ultimo configurar las variables en settings









